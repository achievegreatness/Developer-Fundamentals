Also known as a priority queue, a heap is where the value of the root is greater than that of the child(max heap) or the root is less than that of the child(minheap).

Insertion:

Nodes are automatically added to the end of the heap (from left to right). The value is compared with that of the parent node. If the value is less than/greater than (depending on min/max heap), swap accordingly. Repeat accordingly until the heap property holds.

Deletion:

Remove the root node and replace with the last element in the heap. Compare the new value with the child nodes (from left to right) and swap if the heap property (min or max) follows.

Heapify:

Start at the lowest (furthest in the tree) parent node. Compare parent's value with that of the children. Swap until heap property holds (min or max). Move to the next parent, and continue this process until heap property holds throughout.
